name: CI

on:
    push:
        branches:
            - main

    pull_request:
        branches:
            - main

jobs:
    build-and-test:
        name: Build the project
        runs-on: ubuntu-latest

        #if: github.event_name == 'pull_request'
        steps:
            - uses: actions/checkout@v3

            - name: Install dependencies

              run: npm ci

            - name: Run eslint

              run: npm run lint

            - name: Run tests and coverage

              run: npm run test

              env:
                  DB_HOST: ${{ secrets.TEST_DB_HOST }}

                  DB_PORT: ${{ secrets.TEST_DB_PORT }}

                  DB_USERNAME: ${{ secrets.TEST_DB_USERNAME }}

                  DB_PASS: ${{ secrets.TEST_DB_PASS }}

                  DB_NAME: ${{ secrets.TEST_DB_NAME }}

                  REFRESH_TOKEN_SECRET: ${{ secrets.REFRSH_TOKEN_SECRET }}

                  JWKS_URI: ${{ secrets.JWKS_URI }}

                  PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}

            - name: Build-ts

              run: npm run build

            - name: SonarCloud Scan

              uses: sonarSource/sonarcloud-github-action@master

              env:
                  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    build-and-push-docker:
        name: Build and push docker image
        needs: build-and-test
        runs-on: ubuntu-latest

        env:
            IMAGE_NAME: codersgyan/auth-service

            IMAGE_TAG: build-${{ github.run_number }}

        if: github.ref == 'refs/heads/main' && github.event_name == 'push'

        steps:
            - name: Checkout repository

              uses: actions/checkout@v3

            - name: Login to DockerHub

              uses: docker/login-action@v1

              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}

                  password: ${{ secrets.DOCKERHUB_PASSWORD }}

            - name: Build Docker image

              run: docker build -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} -f docker/prod/Dockerfile .

            - name: Push Docker image to docker hub

              run: docker push ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
